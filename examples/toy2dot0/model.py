import torch, os
from matplotlib import pyplot as plt
import numpy as np
DATA_PATH = "artifacts/cluster_problem_train.pt"
def plot_dataset_with_boundary(x_nuis, y, n_samples=1000):
    """
    Scatterplot of 2D dataset with class-based coloration.
    x_nuis: torch.Tensor [N,2]
    y: torch.Tensor [N]
    """
    x_np = x_nuis.detach().cpu().numpy()
    y_np = y.detach().cpu().numpy()

    if n_samples < len(x_np):
        x_np = x_np[:n_samples]
        y_np = y_np[:n_samples]

    plt.figure(figsize=(6, 6))
    plt.scatter(x_np[:, 0], x_np[:, 1], c=y_np, cmap="coolwarm", alpha=0.6)
    """
    plt.plot([x_np[:,0].min(), x_np[:,0].max()],
             [x_np[:,0].min(), x_np[:,0].max()],
             "k--", label="Decision boundary x=y")
    """
    plt.xlabel("x")
    plt.ylabel("y")
    plt.legend()
    plt.title("Toy 2D dataset with true decision boundary")
    plt.show()

def save_data(X_clean, X_nuis, Y, exist_ok=False):
    """
    Function for saving the data generated by generator function.
    Exits if the file already exists and overwriting is not allowed.
    Returns data dictionary.
    """
    data = {"X_clean": X_clean, "X_nuis": X_nuis, "Y": Y}

    if os.path.exists(DATA_PATH) and not exist_ok:
        print("Found existing dataset at {DATA_PATH}, exit.")
        return data

    os.makedirs(os.path.dirname(DATA_PATH), exist_ok=exist_ok)
    torch.save(data, DATA_PATH)
    print(f"Saved dataset at {DATA_PATH}")
    return data

